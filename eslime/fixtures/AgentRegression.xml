<!--
  ~ Copyright (c) 2014, David Bruce Borenstein and the Trustees of
  ~ Princeton University.
  ~
  ~ Except where otherwise noted, this work is subject to a Creative Commons
  ~ Attribution (CC BY 4.0) license.
  ~
  ~ Attribute (BY): You must attribute the work in the manner specified
  ~ by the author or licensor (but not in any way that suggests that they
  ~ endorse you or your use of the work).
  ~
  ~ The Licensor offers the Licensed Material as-is and as-available, and
  ~ makes no representations or warranties of any kind concerning the
  ~ Licensed Material, whether express, implied, statutory, or other.
  ~
  ~ For the full license, please visit:
  ~ http://creativecommons.org/licenses/by/4.0/legalcode
  -->

<!-- A trivial model incorporating agent-driven events (behaviors). -->

<simulation>

    <version>0.5.0</version>


    <general>
        <!-- This test is deterministic, but eSLIME requires RS -->
        <random-seed>0</random-seed>

        <!-- We only need one pass -->
        <instances>1</instances>

        <!-- Write to test output directory -->
        <path>./jeslime/tests/output/a/</path>

        <!-- We will ultimately want fewer frames... -->
        <max-step>100</max-step>

        <!-- Don't use a date stamp (can't reproduce) -->
        <date-stamp>false</date-stamp>

        <!-- We want output from every step -->
        <output-frames>
            <auto mode="all"/>
        </output-frames>

        <!-- Visualizations should get their own tag. Not yet implemented
             (2/20/2014) -->
        <write-state-map/>
    </general>


    <geometry>
        <shape>
            <class>Rectangle</class>
            <width>32</width>
            <height>32</height>
        </shape>
        <lattice>
            <class>Rectangular</class>
        </lattice>
    </geometry>


    <layers>
        <cell-layer>
            <boundary>
                <class>PlaneRingReflecting</class>
            </boundary>
        </cell-layer>
    </layers>


    <cell-processes>
        <!-- Each time step should advance the integrator clock by 1 unit of time. -->
        <tick>
            <dt>1.0</dt>
        </tick>

        <!-- IC: Place down one fast-growing cell -->
        <fill>
            <cell-descriptor>

                <!-- The Source class is a cell that doesn't eat or divide, but
                     produces a solute at a set rate. -->

                <class>BehaviorCell</class>

                <!-- "state" is really a lineage here and should be distinguished
                     from state/phenotype in the future (2/16/2014). "Sequential"
                     means that all identical cells put down in this step will
                     have the same "state" id. -->
                <state>sequential</state>

                <initial-health>0.5</initial-health>
                <threshold>1.0</threshold>

                <behaviors>
                    <!-- We are defining the "grow" behavior in both the fast and
                         slow cells to mean "increase cell health by a specified
                         amount." The difference is how fast they do it. -->
                    <grow>
                        <adjust-health>
                            <delta>0.5</delta>
                        </adjust-health>
                    </grow>
                </behaviors>
            </cell-descriptor>

            <!-- "offset" specifies a location as a distance from the center. -->
            <active-sites>
                <mode>list</mode>
                <offset x="0" y="0"/>
            </active-sites>

            <!-- Do this once at t=0. -->
            <period>0</period>
            <start>0</start>
        </fill>

        <!-- IC: Place down one slow-growing cell. See comments above. -->
        <fill>

            <!-- Cell properties -->
            <cell-descriptor>
                <class>BehaviorCell</class>
                <state>sequential</state>
                <initial-health>0.5</initial-health>
                <threshold>1.0</threshold>
                <behaviors>
                    <grow>
                        <adjust-health>
                            <delta>0.25</delta>
                        </adjust-health>
                    </grow>
                </behaviors>
            </cell-descriptor>

            <!-- Specify location -->
            <active-sites>
                <mode>list</mode>
                <offset x="1" y="0"/>
            </active-sites>

            <!-- Takes place only at start -->
            <period>0</period>
            <start>0</start>
        </fill>

        <!-- Ongoing: Trigger "grow" behavior in all live cells -->
        <trigger>
            <behavior>grow</behavior>
            <skip-vacant-sites/>
        </trigger>

        <!-- Ongoing: All divisible cells should divide when possible -->
        <divide-anywhere/>
    </cell-processes>


    <writers>
        <!-- Write out a data file containing discrete layer states -->
        <cell-state-writer/>

        <!-- Write out parameters to a plain text file -->
        <parameter-writer/>

        <!-- Report progress to stdout -->
        <progress-reporter/>

        <!-- Create a catalog of coordinates to scalar indices. Required for some
             post-processing, such as visualizations. -->
        <coordinate-indexer/>
    </writers>

</simulation>
